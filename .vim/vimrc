call plug#begin()
Plug 'dstein64/vim-startuptime'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/gv.vim'
Plug 'justinmk/vim-dirvish'
Plug 'justinmk/vim-ipmotion'
Plug 'sirver/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'wincent/ferret'
Plug 'duggiefresh/vim-easydir'
call plug#end()

filetype plugin on
syntax on

set noswapfile					" Never create swap files.
set incsearch ignorecase smartcase hlsearch
set hidden					" Allow not showing unwritten buffers.
set nowrap
set foldmethod=indent foldlevel=99
set shortmess=I					" Don't show intro screen on startup.
set shortmess+=O				" File info or quickfix message overwrites previous message.
set shortmess+=F				" Never show file info when opening a file.
set nojoinspaces				" Don't add double space after .?! when using :j.
set virtualedit=block				" Allow the cursor in position where there is no text in visual block mode.
set completeopt=menuone,noinsert,noselect	" Always show menu, do not auto insert and do not auto select.
set undofile undodir=~/.vimundo			" Save undo history to undo file on write.
set backspace=indent,eol,start
set ttimeoutlen=50
set autoindent
set fillchars=vert:â”‚
if has('patch2508')
	set fillchars+=eob:\ ,			" No tilde filler chars at end of buffer.
endif

let g:netrw_dirhistmax = 0			" Don't create .netrwhist files.

command! W w
command! Q q

augroup BRIANO
	autocmd!
	autocmd BufWritePre * call Format()
augroup END

" Format current buffer with appropriate formatters based on filetype.
function! Format()
	let l:view = winsaveview()
	%s/\s\+$//e		" EOL
	%s/\n\+\%$//e		" EOF
	if &filetype == 'go'
		call system('gofmt', getline(1, '$'))
		if v:shell_error == 0
			%!goimports
		endif
	elseif &filetype == 'haskell'
		%!ormolu
	elseif &filetype == 'markdown'
		%!pandoc -f markdown --wrap preserve --markdown-headings setext
			\ -t commonmark+smart+task_lists+pipe_tables+tex_math_dollars
	endif
	call winrestview(l:view)
endfunction

" TodaysNote open todays note and fill the title if the file is new.
function! TodaysNote()
	let l:datestr = strftime('%Y-%m-%d')
	let l:title = strftime('%d %b %Y')
	let l:filename = '~/notes/' . l:datestr . '.md'
	execute 'edit' l:filename
	if !filereadable(expand('%'))
		execute 'normal! i' . l:title
		execute 'normal! o==========='
		execute 'normal! 0'
	endif
endfunction
