call plug#begin()
Plug 'cespare/vim-sbd'
Plug 'dstein64/vim-startuptime'
Plug 'duggiefresh/vim-easydir'
Plug 'junegunn/gv.vim'
Plug 'justinmk/vim-ipmotion'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'wincent/ferret'
Plug 'wsdjeg/vim-fetch'
call plug#end()

let netrw_banner = 0                 " Hide the big annoying banner.
let netrw_dirhistmax = 0             " Don't create .netrwhist files.
let netrw_list_hide = '^\.\.\?/$'    " Hide . and .. in netrw.
let markdown_folding = 1             " Set folds on markdown headings.
let ip_skipfold = 1                  " From justinmk/vim-ipmotion.
let autoformat = 1

filetype plugin indent off

augroup BRIANO
	autocmd!

	" Format before write.
	autocmd BufWritePre * if autoformat | call Format() | endif

	" Set filetype based on file name.
	autocmd BufRead,BufNewFile *.puml setlocal filetype=plantuml
	autocmd BufRead,BufNewFile *.tex setlocal filetype=tex
	autocmd BufRead,BufNewFile *.ts setlocal filetype=javascript
	autocmd BufRead,BufNewFile go.mod setlocal filetype=go

	" Special indentation for 'special' languages.
	autocmd FileType sql,haskell,python setlocal expandtab shiftwidth=4

	" Netrw mappings (consistent with plugin/maps.vim).
	autocmd FileType netrw nnoremap <buffer> <silent> S :bprevious<cr>
	autocmd FileType netrw nnoremap <buffer> <silent> s :bnext<cr>

	" Quickfix mappings (preview match & disable tmux re-runs from plugin/maps.vim).
	autocmd FileType qf nnoremap <buffer> p <cr><C-w>p
	autocmd FileType qf nnoremap <buffer> <cr> <cr>

	" Keep markdown looking plain.
	autocmd BufEnter *.md hi htmlBold cterm=NONE
	autocmd BufEnter *.md hi htmlItalic cterm=NONE
	autocmd BufEnter *.md hi MarkdownBlockquote ctermfg=NONE

	" Set comment string for vim-commentary.
	autocmd FileType c,cpp,go setlocal commentstring=//\ %s
	autocmd FileType haskell setlocal commentstring=--\ %s
	autocmd FileType markdown setlocal commentstring=<!--\ %s\ -->
	autocmd FileType matlab,tex setlocal commentstring=%\ %s
	autocmd FileType plantuml setlocal commentstring='\ %s
	autocmd FileType python setlocal commentstring=#\ %s
	autocmd FileType vim setlocal commentstring=\"\ %s
augroup END

" Format current buffer with appropriate formatters based on filetype.
function! Format()
	let l:view = winsaveview()
	if &filetype == 'go'
		call system('goimports', getline(1, '$'))
		if v:shell_error == 0
			%!goimports
		endif
	endif
	call winrestview(l:view)
endfunction
